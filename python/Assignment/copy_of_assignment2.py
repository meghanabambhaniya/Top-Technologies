# -*- coding: utf-8 -*-
"""Copy of Assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iPXgOrgrK0cRZC2ExTcQ_ajaTWb51otE

71)What is File function in python? What are keywords to create
and write file

In Python, file handling is done through a set of functions and methods that allow you to create, read, update, and delete files. The built-in open() function is commonly used for these operations.
Here are the keywords (modes) to create and write to a file:

'r': Open a file for reading (default mode).
'w': Open a file for writing. Creates a new file if it does not exist or truncates the file if it exists.
'x': Open a file for exclusive creation. If the file already exists, the operation fails.
'a': Open a file for writing. The file is created if it does not exist. The file pointer is at the end of the file if it exists. Append mode.
't': Text mode (default mode).
'b': Binary mode.
'+': Open a file for updating (reading and writing).

72)Write a Python program to read an entire text file.
"""

file=open("python.txt","w")
file.write("This is file management demo using python")
file.close()
file=open("python.txt","r")
print(file.read())
file.close()

"""73)Write a Python program to append text to a file and display the text."""

file=open("python.txt","a")
file.write("\nThis file is now appended")
file.close()
file=open("python.txt","r")
print(file.read())
file=open("python.txt","r")
file.close()
file=open("python.txt","w+")
file.write("This is w+ mode using python.")
print("Current File Position : ",file.tell())
file.seek(0)
print(file.read())
file.close()

"""74)Write a Python program to read first n lines of a file.

"""

file=open("python.txt","r")
n=int(input("Enter the number of lines to read : "))
for i in range(n):
    line = file.readline()
    print(line,end="")
file.close()

"""75)Write a Python program to read last n lines of a file."""

file=open("python.txt","r")
n=int(input("Enter the number of lines to read : "))
lines=file.readlines()
start_index =  len(lines) - n
for i in range(start_index,len(lines)):
    print(lines[i],end="")
file.close()

"""76)Write a Python program to read a file line by line and store it into a list"""

file=open("python.txt","r")
lines=file.readlines()
print(lines)
file.close()

"""77)Write a Python program to read a file line by line store it into a variable."""

file=open("python.txt","r")
lines=file.readlines()
file.close()
for line in lines:
    print(line)

"""78)Write a python program to find the longest words."""

filename = 'python.txt'
with open(filename, 'r') as in file:
    words = infile.read().split()
max_len = 0
for word in words:
    if len(word) > max_len:
        max_len = len(word)
longest_words = [word for word in words if len(word) == max_len]
print(longest_words)

"""79)Write a Python program to count the number of lines in a text file."""

filename = "python.txt"
with open(filename, "r") as file:
  num_lines = sum(1 for line in file)
print(f"Number of lines in {filename}: {num_lines}")

"""80)Write a Python program to count the frequency of words in a file."""

filename = "python.txt"
with open(filename, "r") as file:
  text = file.read()
words = text.lower().split()
word_counts = {}
for word in words:
  if word in word_counts:
    word_counts[word] += 1
  else:
    word_counts[word] = 1
for word,count in word_counts.items():
  print(f"{word}: {count}")

"""81)Write a Python program to write a list to a file.

"""

animal = ["dog","lion","tiger","elephant","lepard"]
with open("animal.txt","w") as file:
  for animal in animal:
    file.write(animal+"\n")
content = open("animal.txt")
print(content.read())

"""82)Write a Python program to copy the contents of a file to another file.

"""

with open("python.txt","r") as file:
  content = file.read()
with open("copy.txt","w") as file:
  file.write(content)
  content = open("copy.txt")
  print(content.read())

"""83)Explain Exception handling? What is an Error in Python?

Exception handling is a way to gracefully handle errors that occur during program execution. It prevents the program from crashing and allows you to control the flow of execution when unexpected situations arise.

An error in Python is an issue that occurs during the execution of a program, causing it to behave unexpectedly or terminate abruptly. There are two main types of errors:

Syntax errors: These occur when the code violates the rules of the Python language, such as typos or incorrect grammar. They are typically detected by the Python interpreter before the program runs.
Exceptions: These occur during program execution when something unexpected happens, such as trying to divide by zero or accessing a non-existent file.

84)How many except statements can a try-except block have? Name
Some built-in exception classes:

A try-except block can have multiple except statements to handle different types of exceptions. Each except block can specify a particular exception type or a tuple of exception types that it can handle.

Here are some built-in exception classes in Python:

ZeroDivisionError: Raised when division or modulo operation is performed with zero as the divisor.
TypeError: Raised when an operation or function is applied to an object of inappropriate type.
ValueError: Raised when an operation or function receives an argument that has the right type but an inappropriate value.
NameError: Raised when a local or global name is not found.
IOError: Raised when an input/output operation fails, such as when trying to open a file that doesn't exist.
IndexError: Raised when a sequence subscript is out of range.
KeyError: Raised when a dictionary key is not found.

85)When will the else part of try-except-else be executed?

The else part of a try-except-else block will be executed only if no exceptions are raised in the try block. It allows you to specify code that should run only when the code in the try block completes successfully

86)Can one block of except statements handle multiple exception?

This except block will handle TypeError, ValueError, and ZeroDivisionError exceptions.

87)When is the finally block executed?

The finally block in a try-except-finally statement is always executed, regardless of whether an exception occurs or not. It's typically used to perform cleanup actions, such as closing files or releasing resources, that should happen regardless of the outcome of the try block.

88)What happens when „1‟== 1 is executed?

When '1' == 1 is executed, it will evaluate to False.

This is because the == operator checks for equality of both value and type. In this case, '1' is a string and 1 is an integer, so their types are different, resulting in a False comparison.

If you want to compare only the values, you can convert the string to an integer using int() or the integer to a string using str() before comparing.

89)How Do You Handle Exceptions with Try/Except/Finally in Python?
Explain with coding snippets.

The try block contains the code that might raise an exception (in this case, dividing by zero).
The except block specifies the type of exception to handle (ZeroDivisionError) and provides code to handle it (printing an error message).
The finally block contains code that will always execute, regardless of whether an exception occurred or not.
If an exception occurs in the try block, the corresponding except block is executed. If no exception occurs, the except block is skipped, and the finally block is executed.

This structure ensures that the finally block always executes, allowing you to perform cleanup actions or release resources, even if an exception occurs.

90)Write python program that user to enter only odd numbers, else
will raise an exception.
"""

while True:
    try:
        num = int(input("Enter an odd number: "))
        if num % 2 == 0:
            raise ValueError("Even number entered")
        else:
            print("odd number entered:", num)
            break
    except ValueError as e:
        print(e)