# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASooXZv5qvNd2BbO-IC5jGu4x2HVve3k

1) What are the types of Applications?

1. Web Development
2. Data Science and Machine Learning
3. Scientific and Numeric Computing
4. Game Development
5. Desktop GUI Applications
6. Software Development
7. Business Applications
8. Console-based Applications
9. Education
10. Other Applications

2) What is programing?

Programming is a collaboration between humans and computers.
Programming is the process of creating a set of instructions that tell a computer how to perform a task.

It involves designing, writing, testing, and maintaining the source code of computer programs.

This source code is written in a programming language, which is a formal language that can be understood by computers.

3) What is Python?

Python is a high-level, general-purpose programming language. It emphasizes code readability with the use of significant indentation.

It is widely used for web development, data science, machine learning, and more due to its extensive libraries and frameworks.

Its beginner-friendly syntax makes it a popular choice for both novice and experienced programmers.

4) Write a Python program to check if a number is positive, negative or
zero.
"""

num = float(input("Enter a number:"))
if num >0:
    print("positive number")
elif num ==0:
    print("zero")
else:
    print("negative number")

"""5)Write a Python program to get the Factorial number of given numbers."""

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

num = 5
print("Factorial of", num, "is", factorial(num))

"""6)Write a Python program to get the Fibonacci series of given range."""

def fibonacci_range(start, end):
    a = 0
    b = 1
    result = []
    while a < end:
        if a >= start:
            result.append(a)
        a, b = b, a + b
    return result

start = 0
end = 10
print(fibonacci_range(start, end))

"""7)How memory is managed in Python?

Python memory management is the process of allocating and dealing with memory so that your programs can run efficiently. One advantage of Python, compared to other programming languages, is that it can perform memory management tasks automatically.

8)What is the purpose continuing statement in python?

The continue statement in Python is used to skip the remaining code inside a loop for the current iteration only and move on to the next iteration.

9) Write python program that swap two number with temp variable
and without temp variable.
"""

# Swap with temp variable
a = 10
b = 5
temp = a
a = b
b = temp
print("After swapping with temp: a =", a, " b =", b)

# Swap without temp variable
x = 10
y = 5
x, y = y, x
print("After swapping without temp: x =", x, " y =", y)

"""10) Write a Python program to find whether a given number is even
or odd, print out an appropriate message to the user.
"""

num= int(input("Enter a number:"))
if num%2==0:
    print("even number")
else:
    print("odd number")

"""11) Write a Python program to test whether a passed letter is a vowel
or not.
"""

num=input("enter a character:")
if num=='a'or num=='e'or num=='i'or num=='o'or num=='u':
    print("vowel")
else:
    print("not vowel")

"""12) Write a Python program to sum of three given integers. However, if
two values are equal sum will be zero.
"""

def sum_three(x, y, z):
  if x == y or y == z or x == z:
    return 0
  else:
    return x + y + z

print(sum_three(2, 3, 2))
print(sum_three(3, 2, 5))

"""13) Write a Python program that will return true if the two given
integer values are equal or their sum or difference is 5.

"""

num1 = int(input("Enter first number:"))
num2 = int(input("Enter 2nd number:"))
if num1==num2 or abs(num1-num2)==5:
    print("true")
else:
    print("false")

"""14)Write a python program to sum of the first n positive integers."""

num=int(input("enter a number:"))
sum=0
for i in range(1,num+1):
    sum=sum+i
print(sum)

"""15)Write a Python program to calculate the length of a string."""

num=input("enter a string:")
print(len(num))

"""16) Write a Python program to count the number of characters
(character frequency) in a string

"""

num=input("enter a string:")
count={}
for i in num:
    if i in count:
        count[i]+=1
    else:
        count[i]=1
print(count)

"""17)What are negative indexes and why are they used?

Negative indexing allows you to access elements of a sequence from the end, using negative numbers as indexes. This can be useful for getting the last few elements of a sequence, reversing a sequence, or performing other operations that require accessing elements from the end.

18)Write a Python program to count occurrences of a substring in a string.
"""

string=input("enter a string:")
substring=input("enter substring:")
count=0
for i in range(len(string)-len(substring)+1):
    if string[i:i+len(substring)]==substring:
        count+=1
print(count)

"""19) Write a Python program to count the occurrences of each word in a
given sentence
"""

def count_words(sentence):
    words = sentence.split()
    word_counts = {}
    for word in words:
        if word in word_counts:
            word_counts[word] += 1
        else:
            word_counts[word] = 1
    return word_counts

sentence = input("enter a sentence: ")
word_counts = count_words(sentence)
for word, count in word_counts.items():
  print(f'{word}:{count}')

"""20) Write a Python program to get a single string from two given strings,
separated by a space and swap the first two characters of each string.
"""

str1=input("enter first string:")
str2=input("enter second string:")
print(str2[:2]+str1[2:]+" "+str1[:2]+str2[2:])

"""21) Write a Python program to add 'in' at the end of a given string (length
should be at least 3). If the given string already ends with 'ing' then
add 'ly' instead if the string length of the given string is less than 3,
leave it unchanged.
"""

str1=input("enter a string ")
if len(str1)<3:
  print(str1)
elif str1[-3:]=="ing":
  print(str1+"ly")
else:
  print(str1+"ing")

"""22) Write a Python function to reverses a string if its length is a multiple
of 4.
"""

string=input("enter a string ")
if len(string)%4==0:
  print(string[::-1])
else:
  print(string)

"""23) Write a Python program to get a string made of the first 2 and the last
2 chars from a given a string. If the string length is less than 2, return
instead of the empty string.
"""

string=input("enter a string ")
if len(string)<2:
  print("")
else:
  print(string[:2]+string[-2:])

"""24)Write a Python function to insert a string in the middle of a string.'''

"""

def insert_string_middle(main_string, insert_string):
  middle = len(main_string) // 2
  return main_string[:middle] + insert_string + main_string[middle:]

result = insert_string_middle("Python", " is cool")
print(result)

"""25)What is List? How will you reverse a list?

A list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements. Each element or value that is inside of a list is called an item. Just as strings are defined as characters between quotes, lists are defined by having values between square brackets [ ] .
reverse list syntax: [: :-1]

26)How will you remove last object from a list?

The method pop() can be used to remove and return the last value from the list or the given index value. If the index is not given, then the last element is popped out and removed

27)Suppose list1 is [2, 33, 222, 14, and 25], what is list1 [-
1]?
"""

list1=[2,33,222,14,25]
print(list1[-1])

"""28)Differentiate between append () and extend () methods?

In Python, both append() and extend() methods are used to add elements to a list, but they do so in different ways:

append():

Adds a single element to the end of a list.
The element is added as a single item, preserving its original structure (even if it's a list or another iterable).

extend():

Adds multiple elements to the end of a list.
Takes an iterable (like a list, tuple, or string) as an argument and adds each element of that iterable to the list individually.

29) Write a Python function to get the largest number, smallest num
and sum of all from a list.
"""

def get_largest_smallest_sum(numbers):
    largest = number[0]
    smallest = number[0]
    total = 0
    for num in numbers:
        if num > largest:
            largest = num
        if num < smallest:
            smallest = num
        total += num
        return largest, smallest, total
        numbers = [10, 20, 30, 40, 50]
        largest, smallest, total = get_largest_smallest_sum(numbers)
        print("Largest:", largest)
        print("Smallest:", smallest)
        print("Total:", total)

"""30)How will you compare two lists?

Equality Operator (==): The == operator checks if the elements and their order are the same in both lists.
Output: The comparison returns True if the lists are identical and False otherwise.

31) Write a Python program to count the number of strings where the string
length is 2 or more and the first and last character are same from a given list
of strings.
"""

def count_strings(str_list):
  count = 0
  for s in str_list:
    if len(s) >= 2 and s[0] == s[-1]:
      count += 1
  return count

my_list = ["Meghana", "hello", "red", "a", "word"]
print(count_strings(my_list))

"""32)Write a Python program to remove duplicates from a list"""

my_list = [1, 2, 3, 4, 3, 2, 1]
unique_list = []
for num in my_list:
    if num not in unique_list:
        unique_list.append(num)
print(unique_list)

"""33)Write a Python program to check a list is empty or not"""

string=input("enter a string ")
if len(string)==0:
  print("empty")
else:
  print("not empty")

"""34) Write a Python function that takes two lists and returns true if they
have at least one common member.

"""

def common_member(list1, list2):
    for item in list1:
        if item in list2:
            return True
    return False
list1 = [1,8,9]
list2 = [1,2,3]
result = common_member(list1,list2)
print(result)

"""35) Write a Python program to generate and print a list of first and last 5
elements where the values are square of numbers between 1 and 30.

"""

squares = [i**2 for i in range(1,31)]
result = squares[:5] + squares[-5:]
print(result)

"""36) Write a Python function that takes a list and returns a new list with
unique elements of the first list.
"""

my_list = [1,2,3,3,3,3,4,5]
unique_list = list(set(my_list))
print(unique_list)

"""37)Write a Python program to convert a list of characters into a string"""

my_list = ["M","E","G","H","A"]
my_string = "".join(my_list)
print(my_string)

"""38)Write a Python program to select an item randomly from a list."""

num=[1,2,3,4,5]
import random
print(random.choice(num))

"""39)Write a Python program to find the second smallest number in a list."""

a=[10,20,30,40,50]
a.sort()
print(a[1])

"""40)Write a Python program to get unique values from a list

"""

a=[1,2,2,3,4,4,5]
b=set(a)
print(b)

"""41)Write a Python program to check whether a list contains a sub list

"""

def contains_sublist(list1, list2):
    for item in list2:
        if item not in list1:
            return False
    return True
list1 = [7,5]
list2 = [5,7]
print(contains_sublist(list1, list2))

"""42)Write a Python program to split a list into different variables."""

my_list = [1,2,3,4,5]
a,b,c,d,e = my_list
print(a,b,c,d,e)

"""43)What is tuple? Difference between list and tuple

A tuple is an ordered, immutable sequence of elements, similar to a list. However, unlike lists, tuples cannot be modified after they are created.

Here are some key differences between lists and tuples:

Mutability: Lists are mutable, meaning you can change their contents (add, remove, or modify elements) after they are created. Tuples are immutable, so you cannot change their contents once they are defined.

Syntax: Lists are defined using square brackets [], while tuples are defined using parentheses ().

Performance: Tuples are generally slightly faster than lists for certain operations, especially when accessing elements, because they are immutable.

Use Cases: Lists are typically used when you need a collection of items that can be modified, while tuples are used when you need a collection of items that should remain constant.

44)Write a Python program to create a tuple with different data types.
"""

tuple = (2, "Hello", 2.68, True)
print(tuple)

"""45)Write a Python program to unzip a list of tuples into individual lists."""

my_list = [(7,8,9),(15,20,30),(40,55,60)]
x,y,z = zip(*my_list)
print(x)
print(y)
print(z)

"""46)Write a Python program to convert a list of tuples into a dictionary."""

my_list = [(45, "Mango"),(50, "Grapes"),(60, "Banana")]
my_dict = dict(my_list)
print(my_dict)

"""47)How will you create a dictionary using tuples in python?

"""

my_dict = [(1, "Mango"),(2, "Grapes"),(3, "Banana")]
my_dict = dict(my_dict)
print(my_dict)

"""48)Write a Python script to sort (ascending and descending) a
dictionary by value.
"""

my_dict = {1:"apple",2:"watermalon",3:"orange"}
sorted_dict_asc = dict(sorted(my_dict.items(), key=lambda item: item[1]))
print(sorted_dict_asc)
sorted_dict_desc = dict(sorted(my_dict.items(), key=lambda item: item[1],reverse=True))
print(sorted_dict_desc)

"""49)Write a Python script to concatenate following dictionaries to create
a new one.

"""

my_dict1 = {"name":"Meghana","age":"20","gender":"female","address":"ahmedabad"}
my_dict2 = {1:2,2:5,3:10,4:15,5:20}
my_dict3 = {6:30,7:45,8:50,9:55,10:60}
new_dict = {}
for d in (my_dict1,my_dict2,my_dict3):
  new_dict.update(d)
print(new_dict)

"""50)Write a Python script to check if a given key already exists in a
dictionary.
"""

my_dict = {"x":1, "y":2, "z":3}
key_to_check = "m"
if key_to_check in my_dict:
  print(f"The key '{key_to_check}' exist in the dictionary.")
else:
  print(f"The key '{key_to_check}' does not exist in the dictionary.")

"""51)How Do You Traverse Through a Dictionary Object in Python?"""

my_dict = {"name":"Meghana","age":"20","gender":"female","address":"ahmedabad"}
for key,value in my_dict.items():
  print(key,value)

"""52)How Do You Check the Presence of a Key in A Dictionary?

"""

my_dict = {"Roll no":"05","Name":"Meghana","salary":"80000","age":"20"}
key_to_check = "Name"
for key,value in my_dict.items():
 if key_to_check in my_dict:
  print(f"The key '{key_to_check}' exist in the dictionary.")
 else:
  print(f"The key '{key_to_check}' does not exist in the dictionary.")

"""53)Write a Python script to print a dictionary where the keys are
numbers between 1 and 15.
"""

my_dict = {}
for i in range(1,20):
  my_dict[i]=i**2
print(my_dict)

"""54)Write a Python program to check multiple keys exists in a dictionary

"""

my_dict = {"Roll no":"05","Name":"Meghana","salary":"80000","age":"20"}
keys_to_check = ["Roll no","Name","salary","age"]
if all(key in my_dict for key in keys_to_check):
  print("All keys exist in the dictionary.")
else:
  print("At least one key does not exist in the dictionary.")

"""55)Write a Python script to merge two Python dictionaries"""

my_dict1 = {"Roll no":"10","Name":"Meghana","salary":"90000","age":"20"}
my_dict2 = {"city":"ahmedabad","country":"india"}
my_dict1.update(my_dict2)
print(my_dict1)

"""56)Write a Python program to map two lists into a dictionary
Sample output: Counter ({'a': 400, 'b': 400,’d’: 400, 'c': 300}).
"""

my_list1 = ["a","b","c","d"]
my_list2 = [400,400,400,300]
my_dict = dict(zip(my_list1,my_list2))
print(my_dict)

"""57)Write a Python program to find the highest 3 values in a dictionary"""

my_dict = {'a': 10, 'b': 5, 'c': 15, 'd': 2}
sorted_items = sorted(my_dict.items(), key=lambda x: x[1], reverse=True)

top_3_values = [value for key, value in sorted_items[:3]]

print(top_3_values)

"""58)Write a Python program to combine values in python list of dictionaries.
Sample data: [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount':
300}, o {'item': 'item1', 'amount': 750}]
Expected Output:
• Counter ({'item1': 1150, 'item2': 300})
"""

item_list = [{"item": "item1", "amount": 400}, {"item": "item2", "amount": 300}, {"item": "item1", "amount": 750}]

item_amount = {}

for item in item_list:
    key = item["item"]
    if key in item_amount:
        item_amount[key] += item["amount"]
    else:
        item_amount[key] = item["amount"]
print(item_amount)

"""59)Write a Python program to create a dictionary from a string.
Note: Track the count of the letters from the string.

"""

string = "Hello World"
char_count = {}

for char in string:
    char = char.lower()
    if char.isalpha():
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

print(char_count)

"""60)Sample string:
 'w3resource' Expected output:
• {'3': 1,’s’: 1, 'r': 2, 'u': 1, 'w': 1, 'c': 1, 'e': 2, 'o': 1}
"""

def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict
print(char_frequency('w3resource'))

"""61)Write a Python function to calculate the factorial of a number (a
nonnegative integer)
"""

num = int(input("enter a number: "))
factorial = 1
for i in range(1,num+1):
  factorial=factorial*i
print(factorial)

"""62)Write a Python function to check whether a number is in a given range"""

range1=int(input("enter a range: "))
num = int(input("enter a number: "))
if num in range(1,range1):
  print("in range")
else:
  print("not in range")

"""63)Write a Python function to check whether a number is perfect or not."""

num = int(input("enter a number: "))
sum = 0
for i in range(1,num):
  if num%i==0:
    sum=sum+i
if sum==num:
  print("perfect")
else:
  print("not perfect")

"""64)Write a Python function that checks whether a passed string is
palindrome or not

"""

def is_palindrome(string):
    reversed_string = string[::-1]
    if string == reversed_string:
        return True
    else:
        return False
string=input("enter a string: ")
print(is_palindrome(string))

"""65)How Many Basic Types of Functions Are Available in Python?

1.Built-in functions: These are pre-defined functions that are readily available for use in Python, such as print(), len(), and type().

2.User-defined functions: These are functions created by the user to perform specific tasks. You define them using the def keyword, followed by the function name, parameters, and a block of code.

66)How can you pick a random item from a list or tuple?
"""

my_list = [1,2,3,4,5]
import random
print(random.choice(my_list))

"""67)How can you pick a random item from a range?"""

import random
random_number = random.randint(1,10)
print(random_number)

"""68)How can you get a random number in python?"""

import random
random_number = random.random()
print(random_number)

"""69)How will you set the starting value in generating random numbers?

Import the random Module: Start by importing the random module, which provides tools for generating random numbers.

Use the seed() Function: The random.seed(value) function initializes the random number generator with a specific value. This ensures that the sequence of random numbers generated is reproducible.

Choosing a Seed: The seed can be any integer or hashable object. Common choices include a specific number, system time, or a value derived from external sources
"""

import random
random.seed(10)
print(random.random())

"""70) How will you randomize the items of a list in place?"""

my_list = [1,2,3,4,5]
random.shuffle(my_list)
print(my_list)

"""71)What is File function in python? What are keywords to create
and write file.

In Python, you don't have a single "File function". Instead, you interact with files using built-in functions and methods.

To create and write to a file, you'll primarily use these keywords and functions:

Keywords:

open(): Opens a file and returns a file object.

write(): Writes a string to a file.

close(): Closes a file.

read(): Reads the contents of a file (used in read mode).
"""

